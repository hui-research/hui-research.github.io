var jsPsychExtensionMouseTracking=function(t){"use strict";var l={name:"@jspsych/extension-mouse-tracking",version:"1.1.0",description:"jsPsych extension for mouse tracking",type:"module",main:"dist/index.cjs",exports:{import:"./dist/index.js",require:"./dist/index.cjs"},typings:"dist/index.d.ts",unpkg:"dist/index.browser.min.js",files:["src","dist"],source:"src/index.ts",scripts:{test:"jest","test:watch":"npm test -- --watch",tsc:"tsc",build:"rollup --config","build:watch":"npm run build -- --watch"},repository:{type:"git",url:"git+https://github.com/jspsych/jsPsych.git",directory:"packages/extension-mouse-tracking"},author:"Josh de Leeuw",license:"MIT",bugs:{url:"https://github.com/jspsych/jsPsych/issues"},homepage:"https://www.jspsych.org/latest/extensions/mouse-tracking",peerDependencies:{jspsych:">=7.0.0"},devDependencies:{"@jspsych/config":"^3.0.0","@jspsych/test-utils":"^1.2.0"}},h=(c,a,e)=>new Promise((r,s)=>{var i=n=>{try{o(e.next(n))}catch(m){s(m)}},d=n=>{try{o(e.throw(n))}catch(m){s(m)}},o=n=>n.done?r(n.value):Promise.resolve(n.value).then(i,d);o((e=e.apply(c,a)).next())});class u{constructor(a){this.jsPsych=a,this.initialize=e=>h(this,[e],function*({minimum_sample_time:r=0}){this.domObserver=new MutationObserver(this.mutationObserverCallback),this.minimumSampleTime=r}),this.on_start=e=>{e=e||{},this.currentTrialData=[],this.currentTrialTargets=new Map,this.currentTrialSelectors=e.targets||[],this.lastSampleTime=null,this.eventsToTrack=e.events||["mousemove"],this.domObserver.observe(this.jsPsych.getDisplayElement(),{childList:!0})},this.on_load=()=>{this.currentTrialStartTime=performance.now(),this.eventsToTrack.includes("mousemove")&&window.addEventListener("mousemove",this.mouseMoveEventHandler),this.eventsToTrack.includes("mousedown")&&window.addEventListener("mousedown",this.mouseDownEventHandler),this.eventsToTrack.includes("mouseup")&&window.addEventListener("mouseup",this.mouseUpEventHandler)},this.on_finish=()=>(this.domObserver.disconnect(),this.eventsToTrack.includes("mousemove")&&window.removeEventListener("mousemove",this.mouseMoveEventHandler),this.eventsToTrack.includes("mousedown")&&window.removeEventListener("mousedown",this.mouseDownEventHandler),this.eventsToTrack.includes("mouseup")&&window.removeEventListener("mouseup",this.mouseUpEventHandler),{mouse_tracking_data:this.currentTrialData,mouse_tracking_targets:Object.fromEntries(this.currentTrialTargets.entries())}),this.mouseMoveEventHandler=({clientX:e,clientY:r})=>{const s=performance.now(),i=Math.round(s-this.currentTrialStartTime);(this.lastSampleTime===null||s-this.lastSampleTime>=this.minimumSampleTime)&&(this.lastSampleTime=s,this.currentTrialData.push({x:e,y:r,t:i,event:"mousemove"}))},this.mouseUpEventHandler=({clientX:e,clientY:r})=>{const s=performance.now(),i=Math.round(s-this.currentTrialStartTime);this.currentTrialData.push({x:e,y:r,t:i,event:"mouseup"})},this.mouseDownEventHandler=({clientX:e,clientY:r})=>{const s=performance.now(),i=Math.round(s-this.currentTrialStartTime);this.currentTrialData.push({x:e,y:r,t:i,event:"mousedown"})},this.mutationObserverCallback=(e,r)=>{for(const s of this.currentTrialSelectors)if(!this.currentTrialTargets.has(s)){const i=this.jsPsych.getDisplayElement().querySelector(s);i&&this.currentTrialTargets.set(s,i.getBoundingClientRect())}}}}return u.info={name:"mouse-tracking",version:l.version,data:{mouse_tracking_data:{type:t.ParameterType.COMPLEX,array:!0,nested:{x:{type:t.ParameterType.INT},y:{type:t.ParameterType.INT},t:{type:t.ParameterType.INT},event:{type:t.ParameterType.STRING}}},mouse_tracking_targets:{type:t.ParameterType.COMPLEX,nested:{x:{type:t.ParameterType.INT},y:{type:t.ParameterType.INT},width:{type:t.ParameterType.INT},height:{type:t.ParameterType.INT},top:{type:t.ParameterType.INT},bottom:{type:t.ParameterType.INT},left:{type:t.ParameterType.INT},right:{type:t.ParameterType.INT}}}}},u}(jsPsychModule);
//# sourceMappingURL=https://unpkg.com/@jspsych/extension-mouse-tracking@1.1.0/dist/index.browser.min.js.map
